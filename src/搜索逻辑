1. 搜索历史的实现

1.1 规则为按搜索过的时间顺序展示
  localStrage的数据格式： ['xxxx', 'aabc'],
  每次用户有搜索行为时，就往这个数据里unshift用户搜索的关键字
1.2 规则为搜索过的次数展示
  localStrage的数据格式： [{
    keyword: 'xxxx',
    count: 10
  }, {
    keyword: 'aabc',
    count: 20
  }]
  这里和购物车的逻辑一样，
  展示的时候，需要根据count排序

  如果需要存储到数据库，就和后端对好接口，确认需要存储的字段即可

2. 热门搜索

  直接请求后端接口

3. 相关推荐

  3.1 如果后端有存储用户的行为(埋点)，就直接获取接口即可
  3.2 如果后端没有这个接口，但是又想做一个假的东西在这里，或者说后端并没有存储用户行为
    本地就需要存储搜索历史，然后根据用户搜索历史里出现频率高的关键字，去请求搜索的接口

搜索的页的数据结构大体上是这样的

data() {
  return {
    searchHistory: [],
    hotSearch: [],
    recommendations: [],
    searchResult: [],
    keywords: ''
  }
},
computed() {
  hasResult() {
    return this.searchResult.length !== 0;
  }
},
created() {
  this.getHistory();
  this.getHot();
  this.getRecommendations();
},
methods: {
  getHistory() {
    获取搜索历史
  },
  getHot() {
    获取热门搜索
  },
  getRecommendations() {
    获取相关推荐
  },
  doSearch() {

  },
}

视图
<div v-if="hasResult">
  渲染{{searchResult}}
</div>
<div v-else>
    渲染{{searchHistory}}
    渲染{{hotSearch}}
    渲染{{recommendations}}
</div>